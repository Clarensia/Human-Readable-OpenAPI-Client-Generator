{
    "openapi": "3.0.2",
    "info": {
        "title": "High-frequency DEX API",
        "description": "\nOur API empowers you to access live financial data across multiple blockchains (currently supporting 6, with more on the way) with unparalleled speed and efficiency.\n\nWhat sets our API apart? We've optimized performance to deliver an impressive 1000+ calls per second per user, with a lightning-fast processing time of less than 2 millisecond per request. Compare that to other solutions with a 20-millisecond processing time and fewer requests per second, and it's clear why developers choose our API for their trading bots.\n\nAnother game-changing feature is our seamless integration across various blockchains and protocols. With our API, you can reuse the same code without changing a single line, simplifying the development process and saving you valuable time.\n\nReady to try it out? [Sign up for a free API key here](https://dashboard.blockchainapis.io) or start exploring the possibilities on this page. Need support or have questions? Join our [Discord community](https://discord.gg/GphRMJXmS5) where our team and fellow developers are eager to help you make the most of our powerful API.\n",
        "version": "0.2.1"
    },
    "paths": {
        "/v0/blockchains/": {
            "get": {
                "tags": [
                    "blockchains"
                ],
                "summary": "Get the list of blockchains supported by the API",
                "operationId": "blockchains_v0_blockchains__get",
                "responses": {
                    "200": {
                        "description": "The list of the blockchains supported by the API.\n\nUsing this method, you can find the id of the blockchain that you can use for\nother function calls.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Blockchains V0 Blockchains  Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Blockchain"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/exchanges/": {
            "get": {
                "tags": [
                    "exchanges"
                ],
                "summary": "Get the list of supported exchanges by the API",
                "operationId": "exchanges_v0_exchanges__get",
                "parameters": [
                    {
                        "description": "You can ignore this value for this version of the API.",
                        "required": false,
                        "schema": {
                            "title": "Page",
                            "type": "integer",
                            "description": "You can ignore this value for this version of the API.",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "The blockchain from which you want to get the exchanges",
                        "required": false,
                        "schema": {
                            "title": "Blockchain",
                            "type": "string",
                            "description": "The blockchain from which you want to get the exchanges"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all supported exchange of the API.\n\nYou can use the exchange id responded from this for other API calls.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exchanges"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "When an invalid blockchain id is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When an invalid page is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidPageException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/exchanges/info": {
            "get": {
                "tags": [
                    "exchanges"
                ],
                "summary": "Get informations on a specific exchange",
                "operationId": "exchange_v0_exchanges_info_get",
                "parameters": [
                    {
                        "description": "The exchange to get the informations from",
                        "required": true,
                        "schema": {
                            "title": "Exchange",
                            "maxLength": 32,
                            "type": "string",
                            "description": "The exchange to get the informations from"
                        },
                        "example": "uniswapv2_ethereum",
                        "name": "exchange",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information on a specific exchange.\n\nThese informations includes:\n- The blockchain id of the exchange\n- The id of the exchange\n- The name of the exchange\n- The url to access the exchange\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exchange"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Thrown when an invalid exchange id is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExchangeNotSupportedException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/exchanges/pairs": {
            "get": {
                "tags": [
                    "exchanges"
                ],
                "summary": "Get the list of pairs supported by the API",
                "operationId": "pairs_v0_exchanges_pairs_get",
                "parameters": [
                    {
                        "description": "Each request has a maximum of 100 results separated by page",
                        "required": false,
                        "schema": {
                            "title": "Page",
                            "type": "integer",
                            "description": "Each request has a maximum of 100 results separated by page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "The blockchain from which you want to get the pairs",
                        "required": false,
                        "schema": {
                            "title": "Blockchain",
                            "type": "string",
                            "description": "The blockchain from which you want to get the pairs",
                            "max_size": 16
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "description": "The exchange from which you want to get the pairs",
                        "required": false,
                        "schema": {
                            "title": "Exchange",
                            "maxLength": 32,
                            "type": "string",
                            "description": "The exchange from which you want to get the pairs"
                        },
                        "example": "uniswapv2_ethereum",
                        "name": "exchange",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of pairs supported by the API. It returns token addresses,\nblockchain, exchange and the fee that the pair has.\n\nThe fee may vary depending on the exchange used.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pairs"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "oneOf": [
                                    {
                                        "description": "When an invalid blockchain id is given",
                                        "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                    },
                                    {
                                        "description": "When an invalid Exchange id is given",
                                        "$ref": "#/components/schemas/ExchangeNotSupportedException"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "When you give an invalid page number",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidPageException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/exchanges/pairs/reserves": {
            "get": {
                "tags": [
                    "exchanges"
                ],
                "summary": "Get the liquidity inside of the reserve of two tokens.",
                "operationId": "reserves_v0_exchanges_pairs_reserves_get",
                "parameters": [
                    {
                        "description": "The id of the blockchain on which the exchange will happen. It is required because some tokens can have same address accross multiple blockchains",
                        "required": true,
                        "schema": {
                            "title": "Blockchain",
                            "maxLength": 16,
                            "type": "string",
                            "description": "The id of the blockchain on which the exchange will happen. It is required because some tokens can have same address accross multiple blockchains"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "description": "The id of the exchange from which you want to get the reserve",
                        "required": false,
                        "schema": {
                            "title": "Exchange",
                            "maxLength": 32,
                            "type": "string",
                            "description": "The id of the exchange from which you want to get the reserve"
                        },
                        "example": "uniswapv2_ethereum",
                        "name": "exchange",
                        "in": "query"
                    },
                    {
                        "description": "The address of the first token of the pair",
                        "required": true,
                        "schema": {
                            "title": "Token0",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the first token of the pair"
                        },
                        "example": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                        "name": "token0",
                        "in": "query"
                    },
                    {
                        "description": "The address of the second token of the pair",
                        "required": true,
                        "schema": {
                            "title": "Token1",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the second token of the pair"
                        },
                        "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                        "name": "token1",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all of the reserve for the given pair, blockchain and exchange.\nCan return an empty list if the given pair was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Reserves V0 Exchanges Pairs Reserves Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Reserve"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "oneOf": [
                                    {
                                        "description": "When an invalid blockchain id is given",
                                        "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                    },
                                    {
                                        "description": "When an invalid exchange id is given",
                                        "$ref": "#/components/schemas/ExchangeNotSupportedException"
                                    },
                                    {
                                        "description": "When a pair is not found for the given blockchain or exchange",
                                        "$ref": "#/components/schemas/PairNotFoundException"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v0/exchanges/pairs/amountOut": {
            "get": {
                "tags": [
                    "exchanges"
                ],
                "summary": "Get the amount of tokenOut that you will get after selling amountIn tokenIn",
                "operationId": "amountOut_v0_exchanges_pairs_amountOut_get",
                "parameters": [
                    {
                        "description": "The id of the blockchain on which this exchange take place",
                        "required": true,
                        "schema": {
                            "title": "Blockchain",
                            "maxLength": 16,
                            "type": "string",
                            "description": "The id of the blockchain on which this exchange take place"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "description": "The address of the token that you sell",
                        "required": true,
                        "schema": {
                            "title": "Tokenin",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the token that you sell"
                        },
                        "example": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                        "name": "tokenIn",
                        "in": "query"
                    },
                    {
                        "description": "The address of the token that you buy",
                        "required": true,
                        "schema": {
                            "title": "Tokenout",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the token that you buy"
                        },
                        "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                        "name": "tokenOut",
                        "in": "query"
                    },
                    {
                        "description": "The amount of tokenIn that you sell",
                        "required": true,
                        "schema": {
                            "title": "Amountin",
                            "type": "integer",
                            "description": "The amount of tokenIn that you sell"
                        },
                        "example": 1000000000000000000,
                        "name": "amountIn",
                        "in": "query"
                    },
                    {
                        "description": "The exchange on which you want to do the trade",
                        "required": false,
                        "schema": {
                            "title": "Exchange",
                            "maxLength": 32,
                            "type": "string",
                            "description": "The exchange on which you want to do the trade"
                        },
                        "example": "uniswapv2_ethereum",
                        "name": "exchange",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of the amount out that you will get on all of the exchanges. It can return an empty list if the given pair was not found for the given parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Amountout V0 Exchanges Pairs Amountout Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AmountOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "oneOf": [
                                    {
                                        "description": "When an invalid blockchain id is given",
                                        "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                    },
                                    {
                                        "description": "When an invalid exchange id is given",
                                        "$ref": "#/components/schemas/ExchangeNotSupportedException"
                                    },
                                    {
                                        "description": "When a pair is not found for the given blockchain or exchange",
                                        "$ref": "#/components/schemas/PairNotFoundException"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v0/exchanges/pairs/amountIn": {
            "get": {
                "tags": [
                    "exchanges"
                ],
                "summary": "Get the amount of tokenIn that you need to sell in order to get amountOut tokenOut",
                "operationId": "amountIn_v0_exchanges_pairs_amountIn_get",
                "parameters": [
                    {
                        "description": "The id of the blockchain on which this exchange take place",
                        "required": true,
                        "schema": {
                            "title": "Blockchain",
                            "maxLength": 16,
                            "type": "string",
                            "description": "The id of the blockchain on which this exchange take place"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "description": "The address of the token that you sell",
                        "required": true,
                        "schema": {
                            "title": "Tokenin",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the token that you sell"
                        },
                        "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                        "name": "tokenIn",
                        "in": "query"
                    },
                    {
                        "description": "The address of the token that you buy",
                        "required": true,
                        "schema": {
                            "title": "Tokenout",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the token that you buy"
                        },
                        "example": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                        "name": "tokenOut",
                        "in": "query"
                    },
                    {
                        "description": "The amount of tokenOut that you are trying to get",
                        "required": true,
                        "schema": {
                            "title": "Amountout",
                            "type": "integer",
                            "description": "The amount of tokenOut that you are trying to get"
                        },
                        "example": 1000000000000000000,
                        "name": "amountOut",
                        "in": "query"
                    },
                    {
                        "description": "The exchange on which you want to do the trade",
                        "required": false,
                        "schema": {
                            "title": "Exchange",
                            "maxLength": 32,
                            "type": "string",
                            "description": "The exchange on which you want to do the trade"
                        },
                        "example": "uniswapv2_ethereum",
                        "name": "exchange",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of amount in that you will get on all of the exchanges. It can return an empty list if the given pair was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Amountin V0 Exchanges Pairs Amountin Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AmountIn"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "oneOf": [
                                    {
                                        "description": "When an invalid blockchain id is given",
                                        "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                    },
                                    {
                                        "description": "When an invalid exchange id is given",
                                        "$ref": "#/components/schemas/ExchangeNotSupportedException"
                                    },
                                    {
                                        "description": "When a pair is not found for the given blockchain or exchange",
                                        "$ref": "#/components/schemas/PairNotFoundException"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v0/tokens/": {
            "get": {
                "tags": [
                    "tokens"
                ],
                "summary": "Get the list of supported tokens",
                "operationId": "tokens_v0_tokens__get",
                "parameters": [
                    {
                        "description": "Each request have a limit of 100 data separated per pages",
                        "required": false,
                        "schema": {
                            "title": "Page",
                            "type": "integer",
                            "description": "Each request have a limit of 100 data separated per pages",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "description": "The blockchain on which you want to get the tokens",
                        "required": false,
                        "schema": {
                            "title": "Blockchain",
                            "maxLength": 16,
                            "type": "string",
                            "description": "The blockchain on which you want to get the tokens"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of supported tokens ordered by market cap in a descending order.\n\nThe market capitalization is in dollars, it can be null if the liquidity available for the given token is lower than 1000$.\nThe market capitalization is based on USDT.\n\nThe market capitalization of each token is computed as follow:\naverage worth of token in liquidity pools * total token supply",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tokens"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "When an invalid blockchain id is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When an invalid page number is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidPageException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tokens/info": {
            "get": {
                "tags": [
                    "tokens"
                ],
                "summary": "Get information on a specific token",
                "operationId": "token_info_v0_tokens_info_get",
                "parameters": [
                    {
                        "description": "The blockchain on which you want to get the information of the token",
                        "required": true,
                        "schema": {
                            "title": "Blockchain",
                            "maxLength": 16,
                            "type": "string",
                            "description": "The blockchain on which you want to get the information of the token"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "description": "The address of the token that you want to get the informations from",
                        "required": true,
                        "schema": {
                            "title": "Token",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the token that you want to get the informations from"
                        },
                        "example": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Informations on a specific token.\n\nThis information includes:\n- The id of the blockchain that this token is\n- The address of the token\n- The decimals of it\n- The market cap\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "When an invalid blockchain id is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When the given token is not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenNotFoundException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v0/tokens/decimals": {
            "get": {
                "tags": [
                    "tokens"
                ],
                "summary": "Get the decimals of the given token",
                "operationId": "decimals_v0_tokens_decimals_get",
                "parameters": [
                    {
                        "description": "The id of the blockchain of the token",
                        "required": true,
                        "schema": {
                            "title": "Blockchain",
                            "maxLength": 16,
                            "type": "string",
                            "description": "The id of the blockchain of the token"
                        },
                        "example": "ethereum",
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "description": "The address of the token that you want to get the decimals from",
                        "required": true,
                        "schema": {
                            "title": "Token",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string",
                            "description": "The address of the token that you want to get the decimals from"
                        },
                        "example": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The decimals of the specific token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Decimals V0 Tokens Decimals Get",
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "When an invalid blockchain id is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockchainNotSupportedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "WHen the given token is not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenNotFoundException"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AmountIn": {
                "title": "AmountIn",
                "required": [
                    "blockchain",
                    "exchange",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut"
                ],
                "type": "object",
                "properties": {
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The id of blockchain on which the exchange is taking place"
                    },
                    "exchange": {
                        "title": "Exchange",
                        "type": "string",
                        "description": "The id of the exchange used for this trade"
                    },
                    "tokenIn": {
                        "title": "Tokenin",
                        "type": "string",
                        "description": "The address of the token that you sell"
                    },
                    "tokenOut": {
                        "title": "Tokenout",
                        "type": "string",
                        "description": "The address of the token that you buy"
                    },
                    "amountIn": {
                        "title": "Amountin",
                        "type": "integer",
                        "description": "The amount of tokenIn that you have to sell in order to get amountOut tokenOut"
                    },
                    "amountOut": {
                        "title": "Amountout",
                        "type": "integer",
                        "description": "The amount of tokenOut that you wish to buy"
                    }
                },
                "example": {
                    "blockchain": "avalanche",
                    "exchange": "lydia_finance_avalanche",
                    "tokenIn": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
                    "tokenOut": "0xde3A24028580884448a5397872046a019649b084",
                    "amountIn": 843047442340946,
                    "amountOut": 10000
                }
            },
            "AmountOut": {
                "title": "AmountOut",
                "required": [
                    "blockchain",
                    "exchange",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut"
                ],
                "type": "object",
                "properties": {
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The id of blockchain on which the exchange is taking place"
                    },
                    "exchange": {
                        "title": "Exchange",
                        "type": "string",
                        "description": "The id of the exchange used for this trade"
                    },
                    "tokenIn": {
                        "title": "Tokenin",
                        "type": "string",
                        "description": "The address of the token that you sell"
                    },
                    "tokenOut": {
                        "title": "Tokenout",
                        "type": "string",
                        "description": "The address of the token that you buy"
                    },
                    "amountIn": {
                        "title": "Amountin",
                        "type": "integer",
                        "description": "The amount of tokenIn that you sell"
                    },
                    "amountOut": {
                        "title": "Amountout",
                        "type": "integer",
                        "description": "The amount of tokenOut that you will get after selling amountIn tokenIn on this exchange"
                    }
                },
                "example": {
                    "blockchain": "avalanche",
                    "exchange": "lydia_finance_avalanche",
                    "tokenIn": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
                    "tokenOut": "0xde3A24028580884448a5397872046a019649b084",
                    "amountIn": 1000000000000000000,
                    "amountOut": 11088529
                }
            },
            "Blockchain": {
                "title": "Blockchain",
                "required": [
                    "blockchain",
                    "name",
                    "chain_id",
                    "explorer"
                ],
                "type": "object",
                "properties": {
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The blockchain id that should be used for other calls"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "The name of the blockchain"
                    },
                    "chain_id": {
                        "title": "Chain Id",
                        "type": "integer",
                        "description": "The chain id of the blockchain that is used to add the blockchain in wallets like Metamask"
                    },
                    "explorer": {
                        "title": "Explorer",
                        "type": "string",
                        "description": "The url to the explorer of the blockchain"
                    }
                },
                "example": {
                    "blockchain": "avalanche",
                    "name": "Avalanche",
                    "chain_id": 43114,
                    "explorer": "https://snowtrace.io/"
                }
            },
            "BlockchainNotSupportedException": {
                "title": "BlockchainNotSupportedException",
                "required": [
                    "detail",
                    "status_code"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "string",
                        "description": "The detailed message of the exception"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer",
                        "description": "The status code of the exception"
                    }
                },
                "description": "Thrown when an Invalid blockchain id is put during a call to the API.\n\nTo get the list of valid blockchain ids, call `/blockchains`",
                "example": {
                    "detail": "Blockchain with id \"test\" is not supported. You can find a list of valid blockchain ids in /blockchains",
                    "status_code": 422
                }
            },
            "Exchange": {
                "title": "Exchange",
                "required": [
                    "exchange",
                    "blockchain",
                    "name",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "exchange": {
                        "title": "Exchange",
                        "type": "string",
                        "description": "The exchange unique id that should be put in other calls"
                    },
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The blockchain on which the exchange is done"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "The name of the exchange"
                    },
                    "url": {
                        "title": "Url",
                        "type": "string",
                        "description": "The url to the exchange"
                    }
                },
                "example": {
                    "exchange": "lydia_finance_avalanche",
                    "blockchain": "avalanche",
                    "name": "Lydia Finance",
                    "url": "https://exchange.lydia.finance/#/swap",
                    "fee": 200
                }
            },
            "ExchangeNotSupportedException": {
                "title": "ExchangeNotSupportedException",
                "required": [
                    "detail",
                    "status_code"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "string",
                        "description": "The detailed message of the exception"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer",
                        "description": "The status code of the exception"
                    }
                },
                "description": "Thrown when an Invalid exchange id is given during a call to the API.\n\nTo get the list of supported exchange ids, call `/exchanges`",
                "example": {
                    "detail": "Exchange with id \"test\" is not supported. You can get the list of valid exchange ids in /exchanges",
                    "status_code": 422
                }
            },
            "Exchanges": {
                "title": "Exchanges",
                "required": [
                    "page",
                    "total_pages",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "title": "Page",
                        "type": "integer",
                        "description": "The page returned by the request"
                    },
                    "total_pages": {
                        "title": "Total Pages",
                        "type": "integer",
                        "description": "The total amount of pages available"
                    },
                    "data": {
                        "title": "Data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Exchange"
                        },
                        "description": "The list of exchanges"
                    }
                },
                "example": {
                    "page": 1,
                    "total_pages": 1,
                    "data": [
                        {
                            "exchange": "lydia_finance_avalanche",
                            "blockchain": "avalanche",
                            "name": "Lydia Finance",
                            "url": "https://exchange.lydia.finance/#/swap",
                            "fee": 200
                        },
                        {
                            "exchange": "oliveswap_avalanche",
                            "blockchain": "avalanche",
                            "name": "Oliveswap",
                            "url": "https://avax.olive.cash/",
                            "fee": 250
                        }
                    ]
                }
            },
            "InvalidPageException": {
                "title": "InvalidPageException",
                "required": [
                    "detail",
                    "status_code"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "string",
                        "description": "The detailed message of the exception"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer",
                        "description": "The status code of the exception"
                    }
                },
                "description": "Thrown when you given an invalid page index during calls to responses that\ngives paginated results.\n\nAn invalid page is:\n* A number lower or equal to 0\n* A page way too high\n\nYou should start with 1 as page, and then the response object will give you\nthe amount of pages available.",
                "example": {
                    "detail": "-2 is not a valid page number.",
                    "status_code": 400
                }
            },
            "Pair": {
                "title": "Pair",
                "required": [
                    "blockchain",
                    "exchange",
                    "token0",
                    "token1",
                    "fee"
                ],
                "type": "object",
                "properties": {
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The blockchain id on which the pair is"
                    },
                    "exchange": {
                        "title": "Exchange",
                        "type": "string",
                        "description": "The exchange id on which the pair is"
                    },
                    "token0": {
                        "title": "Token0",
                        "type": "string",
                        "description": "The first token of the exchange"
                    },
                    "token1": {
                        "title": "Token1",
                        "type": "string",
                        "description": "The second token of the exchange"
                    },
                    "fee": {
                        "title": "Fee",
                        "type": "integer",
                        "description": "The fee of the pair in 100000 of percents (for example: 1000 is 1%)"
                    }
                },
                "example": {
                    "blockchain": "ethereum",
                    "exchange": "uniswapv2_ethereum",
                    "token0": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                    "token1": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                    "fee": 300
                }
            },
            "Pairs": {
                "title": "Pairs",
                "required": [
                    "page",
                    "total_pages",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "title": "Page",
                        "type": "integer",
                        "description": "The page returned by the request"
                    },
                    "total_pages": {
                        "title": "Total Pages",
                        "type": "integer",
                        "description": "The total amount of pages available"
                    },
                    "data": {
                        "title": "Data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Pair"
                        },
                        "description": "The list of pairs"
                    }
                },
                "example": {
                    "page": 1,
                    "total_pages": 1804,
                    "data": [
                        {
                            "blockchain": "ethereum",
                            "exchange": "uniswapv2_ethereum",
                            "token0": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                            "token1": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                            "fee": 300
                        },
                        {
                            "blockchain": "ethereum",
                            "exchange": "uniswapv2_ethereum",
                            "token0": "0x8E870D67F660D95d5be530380D0eC0bd388289E1",
                            "token1": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                            "fee": 300
                        }
                    ]
                }
            },
            "Reserve": {
                "title": "Reserve",
                "required": [
                    "blockchain",
                    "exchange",
                    "token0",
                    "token1",
                    "reserve0",
                    "reserve1"
                ],
                "type": "object",
                "properties": {
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The blockchain on which the reserve is"
                    },
                    "exchange": {
                        "title": "Exchange",
                        "type": "string",
                        "description": "The id of the exchange on which this reserve is"
                    },
                    "token0": {
                        "title": "Token0",
                        "type": "string",
                        "description": "The address of the token0"
                    },
                    "token1": {
                        "title": "Token1",
                        "type": "string",
                        "description": "The address of the token1"
                    },
                    "reserve0": {
                        "title": "Reserve0",
                        "type": "integer",
                        "description": "The amount of token0 inside of the reserve"
                    },
                    "reserve1": {
                        "title": "Reserve1",
                        "type": "integer",
                        "description": "The amount of token1 inside of the reserve"
                    }
                },
                "example": {
                    "blockchain": "avalanche",
                    "exchange": "lydia_finance_avalanche",
                    "token0": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
                    "token1": "0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15",
                    "reserve0": 11100509297299255000,
                    "reserve1": 117592619550992960
                }
            },
            "Token": {
                "title": "Token",
                "required": [
                    "blockchain",
                    "address",
                    "decimals"
                ],
                "type": "object",
                "properties": {
                    "blockchain": {
                        "title": "Blockchain",
                        "type": "string",
                        "description": "The blockchain on which the token is"
                    },
                    "address": {
                        "title": "Address",
                        "type": "string",
                        "description": "The address of the token on the blockchain"
                    },
                    "decimals": {
                        "title": "Decimals",
                        "type": "integer",
                        "description": "The decimals of the token"
                    },
                    "market_cap": {
                        "title": "Market Cap",
                        "type": "number",
                        "description": "Total supply of the token multiplied by the worth of one token in liquidity pools.\n\nThe value is in dollars, it can be None if the liquidity of the token in pools is lower than 1000$\n\nThis value is in Decimal, and is based on USDT."
                    }
                },
                "example": {
                    "blockchain": "avalanche",
                    "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
                    "decimals": 6,
                    "market_cap": 62609470.072472
                }
            },
            "TokenNotFoundException": {
                "title": "TokenNotFoundException",
                "required": [
                    "detail",
                    "status_code"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "string",
                        "description": "The detailed message of the exception"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "type": "integer",
                        "description": "The status code of the exception"
                    }
                },
                "description": "Thrown when you try to get informations on a token that does not exist inside of our database.\n\nAt BlockchainAPIs, we only handle tokens that are inside of a liquidity pool.\n\nYou can get a list of all of the available tokens by calling `/tokens`",
                "example": {
                    "detail": "Token 0x8E870D67F660D95d5be530380D0eC0bd388289E1 not found for blockchain ethereum",
                    "status_code": 404
                }
            },
            "Tokens": {
                "title": "Tokens",
                "required": [
                    "page",
                    "total_pages",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "title": "Page",
                        "type": "integer",
                        "description": "The page returned by the request"
                    },
                    "total_pages": {
                        "title": "Total Pages",
                        "type": "integer",
                        "description": "The total amount of pages available"
                    },
                    "data": {
                        "title": "Data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Token"
                        },
                        "description": "100 tokens from our database."
                    }
                },
                "example": {
                    "page": 1,
                    "total_pages": 174,
                    "data": [
                        {
                            "blockchain": "avalanche",
                            "address": "0x130966628846BFd36ff31a822705796e8cb8C18D",
                            "decimals": 18,
                            "market_cap": 112266645.61161652
                        },
                        {
                            "blockchain": "avalanche",
                            "address": "0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
                            "decimals": 18,
                            "market_cap": 110936046.16721554
                        },
                        {
                            "blockchain": "avalanche",
                            "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
                            "decimals": 18,
                            "market_cap": 88785441.02623828
                        },
                        {
                            "blockchain": "avalanche",
                            "address": "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
                            "decimals": 18,
                            "market_cap": 71669567.812698
                        },
                        {
                            "blockchain": "avalanche",
                            "address": "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
                            "decimals": 18,
                            "market_cap": 66925902.344998635
                        },
                        {
                            "blockchain": "avalanche",
                            "address": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
                            "decimals": 18,
                            "market_cap": 65308840.501452334
                        },
                        {
                            "blockchain": "avalanche",
                            "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
                            "decimals": 6,
                            "market_cap": 62609470.072472
                        }
                    ]
                }
            },
            "PairNotFoundException": {
                "title": "PairNotFoundException",
                "description": "Thrown when you try to get some data about a pair that does not exist.\n\nTo avoid getting this error, you can get the list of available pairs for\nthe blockchain and exchange that you are interested in by calling `/exchanges/pairs`",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "description": "The detailed message of the exception",
                        "type": "string"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "description": "The status code of the exception",
                        "type": "integer"
                    }
                },
                "required": [
                    "detail",
                    "status_code"
                ],
                "example": {
                    "detail": "Pair 0x8E870D67F660D95d5be530380D0eC0bd388289E1->0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 not found in blockchain Arbitrum",
                    "status_code": 422
                }
            },
            "TooManyRequestsException": {
                "title": "TooManyRequestsException",
                "description": "Thrown when you are doing more request than you are allowed to the API.\n\nTo prevent this exception you can:\n- Lower the amount of requests that you make to the API per second\n- Upgrade your subscription at: https://dashboard.blockchainapis.io/",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "description": "The detailed message of the exception",
                        "type": "string"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "description": "The status code of the exception",
                        "type": "integer"
                    }
                },
                "required": [
                    "detail",
                    "status_code"
                ],
                "example": {
                    "detail": "Too many requests",
                    "status_code": 429
                }
            },
            "UnauthorizedException": {
                "title": "UnauthorizedException",
                "description": "Thrown when you are trying to make an API request with an invalid or expired\nAPI key.\n\nTo prevent this exception, you can:\n- Make the request without an API key\n- Update/get a valid API key at: https://dashboard.blockchainapis.io/",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "description": "The detailed message of the exception",
                        "type": "string"
                    },
                    "status_code": {
                        "title": "Status Code",
                        "description": "The status code of the exception",
                        "type": "integer"
                    }
                },
                "required": [
                    "detail",
                    "status_code"
                ],
                "example": {
                    "detail": "Unauthorized",
                    "status_code": 401
                }
            }
        }
    }
}